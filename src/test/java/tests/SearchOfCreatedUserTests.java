package tests;

import data.User;
import data.UserGenerator;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

public class SearchOfCreatedUserTests extends BaseTest {

    private User createdUser;

    @BeforeClass
    public void createUserWithoutPermissions() {
        UserGenerator userGenerator = new UserGenerator();
        createdUser = userGenerator.generateUserWithAllOptionalFields();
        //example of generated user: login='login-289_1588161234247', email='1588161234247email@google.com', fullName='firstname183 secondname1588161234247', jabber='1588161234247user@jabber.org'}
        app.loginAsRoot();
        app.navigateToUsersPageViaMenu();
        app.manageUsersPage.openNewUserForm();
        app.newUserForm.fillInUserCreationForm(createdUser, false);
        app.newUserForm.submitUserCreation();
    }

    //SEARCH CASES BY WHOLE LOGIN, EMAIL, FULL NAME
    //checks that created user can be found by login name and it's info matches with created user
    @Test
    public void findCreatedUserByWholeLogin() {
        app.navigateToUsersPage();
        Assert.assertTrue(app.manageUsersPage.isUserFoundByLogin(createdUser));
        User userInfoFromPage = app.manageUsersPage.getUserInfoForProvidedLogin(createdUser);
        Assert.assertEquals(userInfoFromPage, createdUser, "user info doesn't match!");
    }

    //checks that created user can be found by email and it's info matches with created user
    @Test
    public void findCreatedUserByWholeEmail() {
        app.navigateToUsersPage();
        Assert.assertTrue(app.manageUsersPage.isUserFoundByEmail(createdUser));
        User userInfoFromPage = app.manageUsersPage.getUserInfoForProvidedEmail(createdUser);
        Assert.assertEquals(userInfoFromPage, createdUser, "user info doesn't match!");
    }

    //checks that created user can be found by full name and it's info matches with created user
    @Test
    public void findCreatedUserByWholeFullName() {
        app.navigateToUsersPage();
        Assert.assertTrue(app.manageUsersPage.isUserFoundByFullName(createdUser));
        User userInfoFromPage = app.manageUsersPage.getUserInfoForProvidedFullName(createdUser);
        Assert.assertEquals(userInfoFromPage, createdUser, "user info doesn't match!");
    }

    // SEARCHS CASES BY PART OF LOGIN, EMAIL, FULL NAME
    //search by partial login name (part of string from the beginning) - FAILS!
    @Test
    public void findCreatedUserByPartLoginBegin() {
        app.navigateToUsersPage();
        String login = createdUser.getLogin(); // example of login "login-19_158807751" generated by User Generator
        String partOfLogin = login.substring(0, login.indexOf('_') + 5); // so this will take this unique part of login: "login-19_1588"
        Assert.assertTrue(app.manageUsersPage.isUserFoundByString(partOfLogin));
        User userInfoFromPage = app.manageUsersPage.getUserInfoBy(partOfLogin);
        Assert.assertEquals(userInfoFromPage, createdUser, "user info doesn't match!");
    }

    //search by partial login name (part of string from the middle) - FAILS!
    @Test
    public void findCreatedUserByPartLoginEnd() {
        app.navigateToUsersPage();
        String login = createdUser.getLogin(); // example of login "login-19_158807751" (generated by User Generator)
        String partOfLogin = login.substring(login.indexOf('-')); // so this will take this unique part of login: "-19_158807751"
        Assert.assertTrue(app.manageUsersPage.isUserFoundByString(partOfLogin));
        User userInfoFromPage = app.manageUsersPage.getUserInfoBy(partOfLogin);
        Assert.assertEquals(userInfoFromPage, createdUser, "user info doesn't match!");
    }


    //search by partial email (from begin till @)
    @Test
    public void findCreatedUserByPartEmailBegin() {
        app.navigateToUsersPage();
        String email = createdUser.getEmail(); // example of email "1588081036150email@google.com" (generated by User Generator)
        String partOfEmail = email.substring(0, email.indexOf('@')); // so this will take this unique part of email: "1588081036150email"
        Assert.assertTrue(app.manageUsersPage.isUserFoundByString(partOfEmail));
        User userInfoFromPage = app.manageUsersPage.getUserInfoBy(partOfEmail);
        Assert.assertEquals(userInfoFromPage, createdUser, "user info doesn't match!");
    }

    //search by partial email (from the middle) FAILS!
    @Test
    public void findCreatedUserByPartEmailEnd() {
        app.navigateToUsersPage();
        String email = createdUser.getEmail(); // example of email "1588081036150email@google.com" (generated by User Generator)
        String partOfEmail = email.substring(4); // so this will take this unique part of email: "081036150email@google.com"
        Assert.assertTrue(app.manageUsersPage.isUserFoundByString(partOfEmail));
        User userInfoFromPage = app.manageUsersPage.getUserInfoBy(partOfEmail);
        Assert.assertEquals(userInfoFromPage, createdUser, "user info doesn't match!");
    }

    //search by partial full name (for parts separated by space)
    @Test
    public void findCreatedUserByPartFullNameSplittedBySpace() {
        app.navigateToUsersPage();
        String fullName = createdUser.getFullName(); // example of full name  "firstname183 secondname1588161234247" (generated by User Generator)
        String[] names = fullName.split(" "); // this will split to "firstname183" and "secondname1588161234247"
        for (String name: names) {
            Assert.assertTrue(app.manageUsersPage.isUserFoundByString(name));
            User userInfoFromPage = app.manageUsersPage.getUserInfoBy(name);
            Assert.assertEquals(userInfoFromPage, createdUser, "user info doesn't match!");
        }
    }
    //search by partial full name from part not splitted by space FAILS!
    @Test
    public void findCreatedUserByPartFullName() {
        app.navigateToUsersPage();
        String fullName = createdUser.getFullName(); // example of full name  "firstname183 secondname1588161234247" (generated by User Generator)
        String partOfFullName= fullName.substring(fullName.indexOf(' ') + 2); // so this will take this unique part of full name: "econdname1588161234247"
        Assert.assertTrue(app.manageUsersPage.isUserFoundByString(partOfFullName));
        User userInfoFromPage = app.manageUsersPage.getUserInfoBy(partOfFullName);
        Assert.assertEquals(userInfoFromPage, createdUser, "user info doesn't match!");
    }

    @AfterClass
    public void removeCreatedUser() {
        app.navigateToUsersPage();
        app.manageUsersPage.deleteUserIfExist(createdUser);
    }
}
