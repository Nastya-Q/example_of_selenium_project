package tests;

import data.User;
import data.UserGenerator;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

public class UserSearchTests extends BaseTest {

    private User createdUser;

    @BeforeClass
    public void createUserWithoutPermissions() {
        UserGenerator userGenerator = new UserGenerator();
        createdUser = userGenerator.generateUserWithAllOptionalFields();
        //example of generated user: User{login='login-373_1588081036150', email='1588081036150email@google.com', fullName='test full name1588081036150', jabber='1588081036150user@jabber.org'}
        app.loginAsRoot();
        app.navigateToUsersPageViaMenu();
        app.manageUsersPage.openNewUserForm();
        app.newUserForm.fillInUserCreationForm(createdUser, false);
        app.newUserForm.submitUserCreation();
    }

    //checks that created user can be found by login name and it's info matches with created user
    @Test
    public void findCreatedUserByLogin() {
        app.navigateToUsersPage();
        Assert.assertTrue(app.manageUsersPage.isUserFoundByLogin(createdUser));
        User createdUserInfo = app.manageUsersPage.getUserInfoForProvidedLogin(createdUser);
        Assert.assertEquals(createdUserInfo, createdUserInfo, "user info doesn't match!");
    }

    //checks that created user can be found by email and it's info matches with created user
    @Test
    public void findCreatedUserByEmail() {
        app.navigateToUsersPage();
        Assert.assertTrue(app.manageUsersPage.isUserFoundByEmail(createdUser));
        User createdUserInfo = app.manageUsersPage.getUserInfoForProvidedEmail(createdUser);
        Assert.assertEquals(createdUserInfo, createdUserInfo, "user info doesn't match!");
    }

    //checks that created user can be found by full name and it's info matches with created user
    @Test
    public void findCreatedUserByFullName() {
        app.navigateToUsersPage();
        Assert.assertTrue(app.manageUsersPage.isUserFoundByFullName(createdUser));
        User createdUserInfo = app.manageUsersPage.getUserInfoForProvidedFullName(createdUser);
        Assert.assertEquals(createdUserInfo, createdUserInfo, "user info doesn't match!");
    }

    //search by partial login name (part of string from the beginning) - FAILS!
    @Test
    public void findCreatedUserByPartLoginBegin() {
        app.navigateToUsersPage();
        String login = createdUser.getLogin(); // example of login "login-19_158807751" generated by User Generator
        String partOfLogin = login.substring(0, login.indexOf('_') + 5); // so this will take this unique part of login: "login-19_1588"
        Assert.assertTrue(app.manageUsersPage.isUserFoundByString(partOfLogin));
        User createdUserInfo = app.manageUsersPage.getUserInfoBy(partOfLogin);
        Assert.assertEquals(createdUserInfo, createdUserInfo, "user info doesn't match!");
    }

    //search by partial login name (part of string from the middle) - FAILS!
    @Test
    public void findCreatedUserByPartLoginEnd() {
        app.navigateToUsersPage();
        String login = createdUser.getLogin(); // example of login "login-19_158807751" (generated by User Generator)
        String partOfLogin = login.substring(login.indexOf('-')); // so this will take this unique part of login: "-19_158807751"
        Assert.assertTrue(app.manageUsersPage.isUserFoundByString(partOfLogin));
        User createdUserInfo = app.manageUsersPage.getUserInfoBy(partOfLogin);
        Assert.assertEquals(createdUserInfo, createdUserInfo, "user info doesn't match!");
    }


    //search by partial email (from begin)
    @Test
    public void findCreatedUserByPartEmailBegin() {
        app.navigateToUsersPage();
        String email = createdUser.getEmail(); // example of email "1588081036150email@google.com" (generated by User Generator)
        String partOfEmail = email.substring(0, email.indexOf('@')); // so this will take this unique part of email: "1588081036150email"
        Assert.assertTrue(app.manageUsersPage.isUserFoundByString(partOfEmail));
        User createdUserInfo = app.manageUsersPage.getUserInfoBy(partOfEmail);
        Assert.assertEquals(createdUserInfo, createdUserInfo, "user info doesn't match!");
    }

    //search by partial email (from the middle) FAILS!
    @Test
    public void findCreatedUserByPartEmailEnd() {
        app.navigateToUsersPage();
        String email = createdUser.getEmail(); // example of email "1588081036150email@google.com" (generated by User Generator)
        String partOfEmail = email.substring(email.indexOf('e')-5); // so this will take this unique part of email: "36150email@google.com"
        Assert.assertTrue(app.manageUsersPage.isUserFoundByString(partOfEmail));
        User createdUserInfo = app.manageUsersPage.getUserInfoBy(partOfEmail);
        Assert.assertEquals(createdUserInfo, createdUserInfo, "user info doesn't match!");
    }

    //todo: rework full name cases to consider spaces (and check email pattern with @ as well)
    //search by partial full name (from begin) FAILS!
    @Test
    public void findCreatedUserByPartFullNameBegin() {
        app.navigateToUsersPage();
        String fullName = createdUser.getFullName(); // example of full name  "test full name1588081036150" (generated by User Generator)
        String partOfFullName= fullName.substring(0, fullName.length()-3); // so this will take this unique part of full name: "test full name1588081036"
        Assert.assertTrue(app.manageUsersPage.isUserFoundByString(partOfFullName));
        User createdUserInfo = app.manageUsersPage.getUserInfoBy(partOfFullName);
        Assert.assertEquals(createdUserInfo, createdUserInfo, "user info doesn't match!");
    }

    //search by partial full name (from the middle after space)
    @Test
    public void findCreatedUserByPartFullNameEnd() {
        app.navigateToUsersPage();
        String fullName = createdUser.getFullName(); // example of full name  "test full name1588081036150" (generated by User Generator)
        String partOfFullName= fullName.substring(fullName.indexOf(' ')); // so this will take this unique part of full name: "full name1588081036150"
        Assert.assertTrue(app.manageUsersPage.isUserFoundByString(partOfFullName));
        User createdUserInfo = app.manageUsersPage.getUserInfoBy(partOfFullName);
        Assert.assertEquals(createdUserInfo, createdUserInfo, "user info doesn't match!");
    }

    @AfterClass
    public void removeCreatedUser() {
        app.navigateToUsersPage();
        app.manageUsersPage.deleteUserIfExist(createdUser);
    }
}
